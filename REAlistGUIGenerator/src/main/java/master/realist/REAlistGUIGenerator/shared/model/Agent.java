package master.realist.REAlistGUIGenerator.shared.model;

// Generated Nov 12, 2013 8:47:49 PM by Hibernate Tools 4.0.0

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Agent generated by hbm2java
 */
@Entity
@Table(name = "agent", catalog = "rea")
public class Agent implements java.io.Serializable {

	private Integer id;
	private String name;
	private Set<Event> events = new HashSet<Event>(0);
	private Set<Proposal> proposals = new HashSet<Proposal>(0);
	private Set<Contract> contracts = new HashSet<Contract>(0);
	private Set<Claim> claimsForSettleAgentId = new HashSet<Claim>(0);
	private Set<Claim> claimsForMaterializeAgentId = new HashSet<Claim>(0);
	private Set<Commitment> commitmentsForProvideAgentId = new HashSet<Commitment>(
			0);
	private Set<Commitment> commitmentsForReceiveAgentId = new HashSet<Commitment>(
			0);
	private Set<Commitment> commitments = new HashSet<Commitment>(0);
	private Set<Negotiation> negotiations = new HashSet<Negotiation>(0);
	private Set<Agenttype> agenttypes = new HashSet<Agenttype>(0);
	private Set<Contract> contractsForInternalAgentId = new HashSet<Contract>(0);
	private Set<FactorAgent> factorAgents = new HashSet<FactorAgent>(0);
	private Set<Resource> resources = new HashSet<Resource>(0);
	private Set<Contract> contractsForExternalAgentId = new HashSet<Contract>(0);
	private Set<Proposal> proposals_1 = new HashSet<Proposal>(0);
	private Set<Duality> dualities = new HashSet<Duality>(0);
	private Set<Locationofagent> locationofagents = new HashSet<Locationofagent>(
			0);
	private Set<Event> eventsForReceiveAgentId = new HashSet<Event>(0);
	private Set<Event> eventsForProvideAgentId = new HashSet<Event>(0);

	public Agent() {
	}

	public Agent(String name, Set<Event> events, Set<Proposal> proposals,
			Set<Contract> contracts, Set<Claim> claimsForSettleAgentId,
			Set<Claim> claimsForMaterializeAgentId,
			Set<Commitment> commitmentsForProvideAgentId,
			Set<Commitment> commitmentsForReceiveAgentId,
			Set<Commitment> commitments, Set<Negotiation> negotiations,
			Set<Agenttype> agenttypes,
			Set<Contract> contractsForInternalAgentId,
			Set<FactorAgent> factorAgents, Set<Resource> resources,
			Set<Contract> contractsForExternalAgentId,
			Set<Proposal> proposals_1, Set<Duality> dualities,
			Set<Locationofagent> locationofagents,
			Set<Event> eventsForReceiveAgentId,
			Set<Event> eventsForProvideAgentId) {
		this.name = name;
		this.events = events;
		this.proposals = proposals;
		this.contracts = contracts;
		this.claimsForSettleAgentId = claimsForSettleAgentId;
		this.claimsForMaterializeAgentId = claimsForMaterializeAgentId;
		this.commitmentsForProvideAgentId = commitmentsForProvideAgentId;
		this.commitmentsForReceiveAgentId = commitmentsForReceiveAgentId;
		this.commitments = commitments;
		this.negotiations = negotiations;
		this.agenttypes = agenttypes;
		this.contractsForInternalAgentId = contractsForInternalAgentId;
		this.factorAgents = factorAgents;
		this.resources = resources;
		this.contractsForExternalAgentId = contractsForExternalAgentId;
		this.proposals_1 = proposals_1;
		this.dualities = dualities;
		this.locationofagents = locationofagents;
		this.eventsForReceiveAgentId = eventsForReceiveAgentId;
		this.eventsForProvideAgentId = eventsForProvideAgentId;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "Id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "Name", length = 45)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "event_participation", catalog = "rea", joinColumns = { @JoinColumn(name = "Agent_Id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "Event_Id", nullable = false, updatable = false) })
	public Set<Event> getEvents() {
		return this.events;
	}

	public void setEvents(Set<Event> events) {
		this.events = events;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "proposal_has_targetagent", catalog = "rea", joinColumns = { @JoinColumn(name = "Agent_Id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "Proposal_Id", nullable = false, updatable = false) })
	public Set<Proposal> getProposals() {
		return this.proposals;
	}

	public void setProposals(Set<Proposal> proposals) {
		this.proposals = proposals;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "contract_has_agents", catalog = "rea", joinColumns = { @JoinColumn(name = "Agent_Id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "Contract_Id", nullable = false, updatable = false) })
	public Set<Contract> getContracts() {
		return this.contracts;
	}

	public void setContracts(Set<Contract> contracts) {
		this.contracts = contracts;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "agentBySettleAgentId")
	public Set<Claim> getClaimsForSettleAgentId() {
		return this.claimsForSettleAgentId;
	}

	public void setClaimsForSettleAgentId(Set<Claim> claimsForSettleAgentId) {
		this.claimsForSettleAgentId = claimsForSettleAgentId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "agentByMaterializeAgentId")
	public Set<Claim> getClaimsForMaterializeAgentId() {
		return this.claimsForMaterializeAgentId;
	}

	public void setClaimsForMaterializeAgentId(
			Set<Claim> claimsForMaterializeAgentId) {
		this.claimsForMaterializeAgentId = claimsForMaterializeAgentId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "agentByProvideAgentId")
	public Set<Commitment> getCommitmentsForProvideAgentId() {
		return this.commitmentsForProvideAgentId;
	}

	public void setCommitmentsForProvideAgentId(
			Set<Commitment> commitmentsForProvideAgentId) {
		this.commitmentsForProvideAgentId = commitmentsForProvideAgentId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "agentByReceiveAgentId")
	public Set<Commitment> getCommitmentsForReceiveAgentId() {
		return this.commitmentsForReceiveAgentId;
	}

	public void setCommitmentsForReceiveAgentId(
			Set<Commitment> commitmentsForReceiveAgentId) {
		this.commitmentsForReceiveAgentId = commitmentsForReceiveAgentId;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "commitment_participation_reservation", catalog = "rea", joinColumns = { @JoinColumn(name = "Agent_Id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "Commitment_Id", nullable = false, updatable = false) })
	public Set<Commitment> getCommitments() {
		return this.commitments;
	}

	public void setCommitments(Set<Commitment> commitments) {
		this.commitments = commitments;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "negotiation_has_agents", catalog = "rea", joinColumns = { @JoinColumn(name = "Agent_Id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "Negotiation_Id", nullable = false, updatable = false) })
	public Set<Negotiation> getNegotiations() {
		return this.negotiations;
	}

	public void setNegotiations(Set<Negotiation> negotiations) {
		this.negotiations = negotiations;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "agent_has_agenttype", catalog = "rea", joinColumns = { @JoinColumn(name = "Agent_Id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "AgentType_Id", nullable = false, updatable = false) })
	public Set<Agenttype> getAgenttypes() {
		return this.agenttypes;
	}

	public void setAgenttypes(Set<Agenttype> agenttypes) {
		this.agenttypes = agenttypes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "agentByInternalAgentId")
	public Set<Contract> getContractsForInternalAgentId() {
		return this.contractsForInternalAgentId;
	}

	public void setContractsForInternalAgentId(
			Set<Contract> contractsForInternalAgentId) {
		this.contractsForInternalAgentId = contractsForInternalAgentId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "agent")
	public Set<FactorAgent> getFactorAgents() {
		return this.factorAgents;
	}

	public void setFactorAgents(Set<FactorAgent> factorAgents) {
		this.factorAgents = factorAgents;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "agent_has_resource", catalog = "rea", joinColumns = { @JoinColumn(name = "Agent_Id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "Resource_Id", nullable = false, updatable = false) })
	public Set<Resource> getResources() {
		return this.resources;
	}

	public void setResources(Set<Resource> resources) {
		this.resources = resources;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "agentByExternalAgentId")
	public Set<Contract> getContractsForExternalAgentId() {
		return this.contractsForExternalAgentId;
	}

	public void setContractsForExternalAgentId(
			Set<Contract> contractsForExternalAgentId) {
		this.contractsForExternalAgentId = contractsForExternalAgentId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "agent")
	public Set<Proposal> getProposals_1() {
		return this.proposals_1;
	}

	public void setProposals_1(Set<Proposal> proposals_1) {
		this.proposals_1 = proposals_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "agent")
	public Set<Duality> getDualities() {
		return this.dualities;
	}

	public void setDualities(Set<Duality> dualities) {
		this.dualities = dualities;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "agent")
	public Set<Locationofagent> getLocationofagents() {
		return this.locationofagents;
	}

	public void setLocationofagents(Set<Locationofagent> locationofagents) {
		this.locationofagents = locationofagents;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "agentByReceiveAgentId")
	public Set<Event> getEventsForReceiveAgentId() {
		return this.eventsForReceiveAgentId;
	}

	public void setEventsForReceiveAgentId(Set<Event> eventsForReceiveAgentId) {
		this.eventsForReceiveAgentId = eventsForReceiveAgentId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "agentByProvideAgentId")
	public Set<Event> getEventsForProvideAgentId() {
		return this.eventsForProvideAgentId;
	}

	public void setEventsForProvideAgentId(Set<Event> eventsForProvideAgentId) {
		this.eventsForProvideAgentId = eventsForProvideAgentId;
	}

}
