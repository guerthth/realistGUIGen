package master.realist.REAlistGUIGenerator.shared.model;

// Generated Nov 5, 2013 2:01:09 PM by Hibernate Tools 4.0.0

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Commitment generated by hbm2java
 */
@Entity
@Table(name = "commitment", catalog = "rea")
public class Commitment implements java.io.Serializable {

	private int id;
	private Eventtype eventtype;
	private Currency currency;
	private Agent agentByProvideAgentId;
	private Agent agentByReceiveAgentId;
	private Contract contract;
	private Double totalValue;
	private Double totalValueNet;
	private Boolean isCompletelyFulfilled;
	private Date dateCommitted;
	private Date dateStartExpected;
	private Date dateEndExpected;
	private Set<Fulfills> fulfillses = new HashSet<Fulfills>(0);
	private Set<Stockflow> stockflows = new HashSet<Stockflow>(0);
	private Set<CommitmentHasLocation> commitmentHasLocations = new HashSet<CommitmentHasLocation>(
			0);
	private Set<Proposal> proposals = new HashSet<Proposal>(0);
	private Set<CommitmentParticipationSpecification> commitmentParticipationSpecifications = new HashSet<CommitmentParticipationSpecification>(
			0);
	private Set<Agent> agents = new HashSet<Agent>(0);

	public Commitment() {
	}

	public Commitment(int id, Eventtype eventtype) {
		this.id = id;
		this.eventtype = eventtype;
	}

	public Commitment(
			int id,
			Eventtype eventtype,
			Currency currency,
			Agent agentByProvideAgentId,
			Agent agentByReceiveAgentId,
			Contract contract,
			Double totalValue,
			Double totalValueNet,
			Boolean isCompletelyFulfilled,
			Date dateCommitted,
			Date dateStartExpected,
			Date dateEndExpected,
			Set<Fulfills> fulfillses,
			Set<Stockflow> stockflows,
			Set<CommitmentHasLocation> commitmentHasLocations,
			Set<Proposal> proposals,
			Set<CommitmentParticipationSpecification> commitmentParticipationSpecifications,
			Set<Agent> agents) {
		this.id = id;
		this.eventtype = eventtype;
		this.currency = currency;
		this.agentByProvideAgentId = agentByProvideAgentId;
		this.agentByReceiveAgentId = agentByReceiveAgentId;
		this.contract = contract;
		this.totalValue = totalValue;
		this.totalValueNet = totalValueNet;
		this.isCompletelyFulfilled = isCompletelyFulfilled;
		this.dateCommitted = dateCommitted;
		this.dateStartExpected = dateStartExpected;
		this.dateEndExpected = dateEndExpected;
		this.fulfillses = fulfillses;
		this.stockflows = stockflows;
		this.commitmentHasLocations = commitmentHasLocations;
		this.proposals = proposals;
		this.commitmentParticipationSpecifications = commitmentParticipationSpecifications;
		this.agents = agents;
	}

	@Id
	@Column(name = "Id", unique = true, nullable = false)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "EventType_Id", nullable = false)
	public Eventtype getEventtype() {
		return this.eventtype;
	}

	public void setEventtype(Eventtype eventtype) {
		this.eventtype = eventtype;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "Currency_Id")
	public Currency getCurrency() {
		return this.currency;
	}

	public void setCurrency(Currency currency) {
		this.currency = currency;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ProvideAgent_Id")
	public Agent getAgentByProvideAgentId() {
		return this.agentByProvideAgentId;
	}

	public void setAgentByProvideAgentId(Agent agentByProvideAgentId) {
		this.agentByProvideAgentId = agentByProvideAgentId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ReceiveAgent_Id")
	public Agent getAgentByReceiveAgentId() {
		return this.agentByReceiveAgentId;
	}

	public void setAgentByReceiveAgentId(Agent agentByReceiveAgentId) {
		this.agentByReceiveAgentId = agentByReceiveAgentId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "Contract_Id")
	public Contract getContract() {
		return this.contract;
	}

	public void setContract(Contract contract) {
		this.contract = contract;
	}

	@Column(name = "TotalValue", precision = 22, scale = 0)
	public Double getTotalValue() {
		return this.totalValue;
	}

	public void setTotalValue(Double totalValue) {
		this.totalValue = totalValue;
	}

	@Column(name = "TotalValueNet", precision = 22, scale = 0)
	public Double getTotalValueNet() {
		return this.totalValueNet;
	}

	public void setTotalValueNet(Double totalValueNet) {
		this.totalValueNet = totalValueNet;
	}

	@Column(name = "IsCompletelyFulfilled")
	public Boolean getIsCompletelyFulfilled() {
		return this.isCompletelyFulfilled;
	}

	public void setIsCompletelyFulfilled(Boolean isCompletelyFulfilled) {
		this.isCompletelyFulfilled = isCompletelyFulfilled;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DateCommitted", length = 19)
	public Date getDateCommitted() {
		return this.dateCommitted;
	}

	public void setDateCommitted(Date dateCommitted) {
		this.dateCommitted = dateCommitted;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DateStartExpected", length = 19)
	public Date getDateStartExpected() {
		return this.dateStartExpected;
	}

	public void setDateStartExpected(Date dateStartExpected) {
		this.dateStartExpected = dateStartExpected;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DateEndExpected", length = 19)
	public Date getDateEndExpected() {
		return this.dateEndExpected;
	}

	public void setDateEndExpected(Date dateEndExpected) {
		this.dateEndExpected = dateEndExpected;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "commitment")
	public Set<Fulfills> getFulfillses() {
		return this.fulfillses;
	}

	public void setFulfillses(Set<Fulfills> fulfillses) {
		this.fulfillses = fulfillses;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "commitment_has_stockflow", catalog = "rea", joinColumns = { @JoinColumn(name = "Commitment_Id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "Stockflow_Id", nullable = false, updatable = false) })
	public Set<Stockflow> getStockflows() {
		return this.stockflows;
	}

	public void setStockflows(Set<Stockflow> stockflows) {
		this.stockflows = stockflows;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "commitment")
	public Set<CommitmentHasLocation> getCommitmentHasLocations() {
		return this.commitmentHasLocations;
	}

	public void setCommitmentHasLocations(
			Set<CommitmentHasLocation> commitmentHasLocations) {
		this.commitmentHasLocations = commitmentHasLocations;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "proposal_has_commitment", catalog = "rea", joinColumns = { @JoinColumn(name = "Commitment_Id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "Proposal_Id", nullable = false, updatable = false) })
	public Set<Proposal> getProposals() {
		return this.proposals;
	}

	public void setProposals(Set<Proposal> proposals) {
		this.proposals = proposals;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "commitment")
	public Set<CommitmentParticipationSpecification> getCommitmentParticipationSpecifications() {
		return this.commitmentParticipationSpecifications;
	}

	public void setCommitmentParticipationSpecifications(
			Set<CommitmentParticipationSpecification> commitmentParticipationSpecifications) {
		this.commitmentParticipationSpecifications = commitmentParticipationSpecifications;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "commitment_participation_reservation", catalog = "rea", joinColumns = { @JoinColumn(name = "Commitment_Id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "Agent_Id", nullable = false, updatable = false) })
	public Set<Agent> getAgents() {
		return this.agents;
	}

	public void setAgents(Set<Agent> agents) {
		this.agents = agents;
	}

}
