package master.realist.REAlistGUIGenerator.shared.model;

// Generated Dec 10, 2013 2:10:07 PM by Hibernate Tools 4.0.0

import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;

import master.realist.REAlistGUIGenerator.shared.dto.AgenttypeDTO;

/**
 * Agenttype generated by hbm2java
 */
@Entity
@Table(name = "agenttype", catalog = "rea")
public class Agenttype implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -2785180816288909820L;
	private String id;
	private Agenttype agenttype;
	private String name;
	private Boolean isExternal;
	private Set<Contracttype> contracttypesForIncrementAgentType = new HashSet<Contracttype>(
			0);
	private Set<Contracttype> contracttypesForDecrementAgentType = new HashSet<Contracttype>(
			0);
	private Set<AgenttypeHasAdditionalattribute> agenttypeHasAdditionalattributes = new LinkedHashSet<AgenttypeHasAdditionalattribute>(
			0);
	private Set<Pricelist> pricelists = new HashSet<Pricelist>(0);
	private Set<Agenttype> agenttypes = new HashSet<Agenttype>(0);
	private Set<FactorAgenttype> factorAgenttypes = new HashSet<FactorAgenttype>(
			0);
	private Set<Agent> agents = new HashSet<Agent>(0);
	private Set<Eventtypeparticipation> eventtypeparticipations = new HashSet<Eventtypeparticipation>(
			0);
	private Set<CommitmentParticipationSpecification> commitmentParticipationSpecifications = new HashSet<CommitmentParticipationSpecification>(
			0);

	/**
	 * Added constructor to convert a agenttypeDTO object to a agenttype object
	 * Needed to save in the DB
	 * @param agenttypeDTO
	 */
	public Agenttype(AgenttypeDTO agenttypeDTO){
		this.id = agenttypeDTO.getId();
		this.name = agenttypeDTO.getName();
		this.isExternal = agenttypeDTO.isExternal();
		if(agenttypeDTO.getParentAgenttypeId() != null){
			this.agenttype = new Agenttype(agenttypeDTO.getParentAgenttypeId());
		}
	}
	
	public Agenttype() {
	}

	public Agenttype(String id) {
		this.id = id;
	}

	public Agenttype(
			String id,
			Agenttype agenttype,
			String name,
			Boolean isExternal,
			Set<Contracttype> contracttypesForIncrementAgentType,
			Set<Contracttype> contracttypesForDecrementAgentType,
			Set<AgenttypeHasAdditionalattribute> agenttypeHasAdditionalattributes,
			Set<Pricelist> pricelists,
			Set<Agenttype> agenttypes,
			Set<FactorAgenttype> factorAgenttypes,
			Set<Agent> agents,
			Set<Eventtypeparticipation> eventtypeparticipations,
			Set<CommitmentParticipationSpecification> commitmentParticipationSpecifications) {
		this.id = id;
		this.agenttype = agenttype;
		this.name = name;
		this.isExternal = isExternal;
		this.contracttypesForIncrementAgentType = contracttypesForIncrementAgentType;
		this.contracttypesForDecrementAgentType = contracttypesForDecrementAgentType;
		this.agenttypeHasAdditionalattributes = agenttypeHasAdditionalattributes;
		this.pricelists = pricelists;
		this.agenttypes = agenttypes;
		this.factorAgenttypes = factorAgenttypes;
		this.agents = agents;
		this.eventtypeparticipations = eventtypeparticipations;
		this.commitmentParticipationSpecifications = commitmentParticipationSpecifications;
	}

	@Id
	@Column(name = "Id", unique = true, nullable = false, length = 150)
	public String getId() {
		return this.id;
	}

	public void setId(String id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ParentAgentType_Id")
	public Agenttype getAgenttype() {
		return this.agenttype;
	}

	public void setAgenttype(Agenttype agenttype) {
		this.agenttype = agenttype;
	}

	@Column(name = "Name", length = 150)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "IsExternal")
	public Boolean getIsExternal() {
		return this.isExternal;
	}

	public void setIsExternal(Boolean isExternal) {
		this.isExternal = isExternal;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "agenttypeByIncrementAgentType")
	public Set<Contracttype> getContracttypesForIncrementAgentType() {
		return this.contracttypesForIncrementAgentType;
	}

	public void setContracttypesForIncrementAgentType(
			Set<Contracttype> contracttypesForIncrementAgentType) {
		this.contracttypesForIncrementAgentType = contracttypesForIncrementAgentType;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "agenttypeByDecrementAgentType")
	public Set<Contracttype> getContracttypesForDecrementAgentType() {
		return this.contracttypesForDecrementAgentType;
	}

	public void setContracttypesForDecrementAgentType(
			Set<Contracttype> contracttypesForDecrementAgentType) {
		this.contracttypesForDecrementAgentType = contracttypesForDecrementAgentType;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "agenttype")
	@OrderBy("attribute.id ASC")
	public Set<AgenttypeHasAdditionalattribute> getAgenttypeHasAdditionalattributes() {
		return this.agenttypeHasAdditionalattributes;
	}

	public void setAgenttypeHasAdditionalattributes(
			Set<AgenttypeHasAdditionalattribute> agenttypeHasAdditionalattributes) {
		this.agenttypeHasAdditionalattributes = agenttypeHasAdditionalattributes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "agenttype")
	public Set<Pricelist> getPricelists() {
		return this.pricelists;
	}

	public void setPricelists(Set<Pricelist> pricelists) {
		this.pricelists = pricelists;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "agenttype")
	public Set<Agenttype> getAgenttypes() {
		return this.agenttypes;
	}

	public void setAgenttypes(Set<Agenttype> agenttypes) {
		this.agenttypes = agenttypes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "agenttype")
	public Set<FactorAgenttype> getFactorAgenttypes() {
		return this.factorAgenttypes;
	}

	public void setFactorAgenttypes(Set<FactorAgenttype> factorAgenttypes) {
		this.factorAgenttypes = factorAgenttypes;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "agent_has_agenttype", catalog = "rea", joinColumns = { @JoinColumn(name = "AgentType_Id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "Agent_Id", nullable = false, updatable = false) })
	public Set<Agent> getAgents() {
		return this.agents;
	}

	public void setAgents(Set<Agent> agents) {
		this.agents = agents;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "agenttype")
	public Set<Eventtypeparticipation> getEventtypeparticipations() {
		return this.eventtypeparticipations;
	}

	public void setEventtypeparticipations(
			Set<Eventtypeparticipation> eventtypeparticipations) {
		this.eventtypeparticipations = eventtypeparticipations;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "agenttype")
	public Set<CommitmentParticipationSpecification> getCommitmentParticipationSpecifications() {
		return this.commitmentParticipationSpecifications;
	}

	public void setCommitmentParticipationSpecifications(
			Set<CommitmentParticipationSpecification> commitmentParticipationSpecifications) {
		this.commitmentParticipationSpecifications = commitmentParticipationSpecifications;
	}

}
