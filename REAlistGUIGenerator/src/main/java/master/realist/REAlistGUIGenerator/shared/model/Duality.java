package master.realist.REAlistGUIGenerator.shared.model;

// Generated Dec 10, 2013 2:10:07 PM by Hibernate Tools 4.0.0

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import master.realist.REAlistGUIGenerator.shared.dto.DualityDTO;

/**
 * Duality generated by hbm2java
 */
@Entity
@Table(name = "duality", catalog = "rea")
public class Duality implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 435391659034687018L;
	private Integer id;
	private Agent agent;
	private Dualitytype dualitytype;
	private Dualitystatus dualitystatus;
	private Date date;
	private Set<Claim> claims = new HashSet<Claim>(0);
	private Set<Contract> contracts = new HashSet<Contract>(0);
	private Set<Event> events = new HashSet<Event>(0);

	/**
	 * Added constructor to convert a dualitydto object to a duality object
	 * Needed to save in the DB
	 * @param dualityDTO
	 */
	public Duality(DualityDTO dualityDTO){
		// TODO: Adding all the attributes
		id = dualityDTO.getId();
		date = dualityDTO.getDate();
		dualitytype = new Dualitytype(dualityDTO.getDualitytype());
	}
	
	public Duality() {
	}

	public Duality(Dualitytype dualitytype, Dualitystatus dualitystatus) {
		this.dualitytype = dualitytype;
		this.dualitystatus = dualitystatus;
	}

	public Duality(Agent agent, Dualitytype dualitytype,
			Dualitystatus dualitystatus, Date date, Set<Claim> claims,
			Set<Contract> contracts, Set<Event> events) {
		this.agent = agent;
		this.dualitytype = dualitytype;
		this.dualitystatus = dualitystatus;
		this.date = date;
		this.claims = claims;
		this.contracts = contracts;
		this.events = events;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "Id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ExternalAgent_Id")
	public Agent getAgent() {
		return this.agent;
	}

	public void setAgent(Agent agent) {
		this.agent = agent;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "DualityType_Id", nullable = false)
	public Dualitytype getDualitytype() {
		return this.dualitytype;
	}

	public void setDualitytype(Dualitytype dualitytype) {
		this.dualitytype = dualitytype;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "Status_Id", nullable = false)
	public Dualitystatus getDualitystatus() {
		return this.dualitystatus;
	}

	public void setDualitystatus(Dualitystatus dualitystatus) {
		this.dualitystatus = dualitystatus;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "Date", length = 10)
	public Date getDate() {
		return this.date;
	}

	public void setDate(Date date) {
		this.date = date;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "duality_has_claim", catalog = "rea", joinColumns = { @JoinColumn(name = "Duality_Id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "Claim_Id", nullable = false, updatable = false) })
	public Set<Claim> getClaims() {
		return this.claims;
	}

	public void setClaims(Set<Claim> claims) {
		this.claims = claims;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "duality_has_contract", catalog = "rea", joinColumns = { @JoinColumn(name = "Duality_Id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "Contract_Id", nullable = false, updatable = false) })
	public Set<Contract> getContracts() {
		return this.contracts;
	}

	public void setContracts(Set<Contract> contracts) {
		this.contracts = contracts;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "duality")
	public Set<Event> getEvents() {
		return this.events;
	}

	public void setEvents(Set<Event> events) {
		this.events = events;
	}

}
