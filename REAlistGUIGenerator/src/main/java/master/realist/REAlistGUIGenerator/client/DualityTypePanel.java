package master.realist.REAlistGUIGenerator.client;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import master.realist.REAlistGUIGenerator.shared.dto.DualitytypeDTO;

import com.google.gwt.core.client.GWT;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;

import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.FlexTable;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.ListBox;
import com.google.gwt.user.client.ui.TabPanel;
import com.google.gwt.user.client.ui.VerticalPanel;

public class DualityTypePanel extends VerticalPanel {

	// Logger
	private final static Logger logger = Logger.getLogger("DualityTypePanelLogger");
	
	// Dualitytype panel + ArrayList
	private FlexTable dualitytypeFlexTable = new FlexTable();
	private Label dualitytypeLabel = new Label("Choose Dualitytype: ");
	private ListBox dualitytypeListBox = new ListBox();
	private List<DualitytypeDTO> existingDualitytypeDTOs = new ArrayList<DualitytypeDTO>();
	private Button dualitytypeSelectionButton = new Button("Select");
	
	// Asyn READB Service
	private READBServiceAsync reaDBSvc = GWT.create(READBService.class);	
	
	// Current Dualitytype_Id
	private DualitytypeDTO currentDualityType;
	
	// Eventtype Tab Panel
	private TabPanel eventypeSetTabPanel;
	
	
	/**
	 * Constructor
	 */
	public DualityTypePanel(){
		populateDualityTypePanel();
	}
	
	/**
	 * Method populating the DualityTypePanel
	 */
	private void populateDualityTypePanel(){
		
		// Assemble Dualitytype panel
		dualitytypeFlexTable.setWidget(0, 0, dualitytypeLabel);
		dualitytypeFlexTable.setWidget(0, 1, dualitytypeListBox);
		dualitytypeFlexTable.setWidget(0, 2, dualitytypeSelectionButton);
		dualitytypeFlexTable.setCellSpacing(5);

		// listen for mouse events on the dualitytypeSelectionButton
		dualitytypeSelectionButton.addClickHandler(new ClickHandler(){
			public void onClick(ClickEvent event){
			    loadDualitytypeContent(dualitytypeListBox.getSelectedIndex());
			}
		});
		
		// get existing dualityType and populate dualitytypeListBox
		getExistingDualityTypes();
		
  		 // assemble dualitytypePanel
		this.add(dualitytypeFlexTable);  
		
	}
	
	
	/**
	 * Method retrieving the dualitytypes in the REA DB 
	 * and returning them as List
	 * @return 
	 */
	private void getExistingDualityTypes(){
		
		// Initialize the service proxy.
	    if (reaDBSvc == null) {
	    	reaDBSvc = GWT.create(READBService.class);
	    }

	    // Set up the callback object.
	    AsyncCallback<List<DualitytypeDTO>> callback = new AsyncCallback<List<DualitytypeDTO>>() {
	      public void onFailure(Throwable caught) {
	    	  logREADBRPCFailure("getDualitytypes()");
	    	  caught.printStackTrace();
	      }

	      public void onSuccess(List<DualitytypeDTO> result) {
	    	  
	    	  // populate dualitytypeListBox
	    	  String dualitytypeDisplayName;
	    	  for(DualitytypeDTO ddto : result){
	    		  // not the autogenerated name, but the simplyfied form should be displayed
	    		  int trimIndex = ddto.getName().indexOf("_Duality");
	    		  dualitytypeDisplayName = ddto.getName().substring(0,trimIndex);
	    		  dualitytypeListBox.addItem(dualitytypeDisplayName);
	    		  existingDualitytypeDTOs.add(ddto);
	    	  }
	    	  
	    	  dualitytypeListBox.setVisibleItemCount(1);
	    	  
	      }
	    };

	    // Make the call to the stock price service.
	    reaDBSvc.getDualitytypes(callback);
	}
	
	
	/**
	 * Loading Resource, Event, Agentsections
	 */
	private void loadDualitytypeContent(int selectedIndex){
		
		// TODO: INCLUDE THIS
		// since a new Dualitytype content is loaded the arraylist for
		// eventdtos to save has to be refreshed
		//saveEventDTOList.clear();
		// the same happens for additional attributes
		//eventAttributeMap.clear();
		
		
		//retrieve selected DualitytypeDTO object
		DualitytypeDTO selectedDualityType = existingDualitytypeDTOs.get(selectedIndex);
		currentDualityType = selectedDualityType;
		
		// removing the tabpanel from the main panel if it already exists to avoid adding it several times
		if(eventypeSetTabPanel != null){
			this.remove(eventypeSetTabPanel);
		}
		
		// Tab Panel for Eventtypes of a specific Duality
		eventypeSetTabPanel = new EventPanel(selectedDualityType);
		
		// preselecting the first tab of the panel
		eventypeSetTabPanel.selectTab(0);
		
		// add the tabpanel to the main panel
		this.add(eventypeSetTabPanel);

	}

	
	/**
	 * Logging method for all failures that occur when making RPC calls to READB service
	 * @param methodDef REAB method that is called
	 */
	public static void logREADBRPCFailure(String methodDef){
		
		logger.info("Error when making RPC call to " + methodDef + " READB service method.");
	}
	
}
